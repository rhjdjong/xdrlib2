<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

<type_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

!'typedef' 
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */

!'enum' 
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */

!'struct' 
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */

!'union' 
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */

!type_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

<constant_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

<identifier<constant_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

>'const' /[A-Za-z][A-Za-z0-9_]*/
<1:6> MAXUSERNAME = 32;     /* max length of a user name */

!identifier<constant_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

!constant_def<definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

!definition<specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

>specification<start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

!start   
<1:1>const MAXUSERNAME = 32;     /* max length of a user name */ 

Traceback (most recent call last):
  File "C:\Users\Ruud\Documents\Git\xdrlib2\parser\parser.py", line 570, in <module>
    ast = generic_main(main, xdrParser, name='xdr')
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\util.py", line 316, in generic_main
    colorize=args.color
  File "C:\Users\Ruud\Documents\Git\xdrlib2\parser\parser.py", line 565, in main
    **kwargs)
  File "C:\Users\Ruud\Documents\Git\xdrlib2\parser\parser.py", line 100, in parse
    return super(xdrParser, self).parse(text, *args, **kwargs)
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 227, in parse
    result = rule()
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 86, in wrapper
    return self._call(rule, name, params, kwparams)
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 475, in _call
    node, newpos, newstate = self._invoke_rule(rule, name, params, kwparams)
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 511, in _invoke_rule
    rule(self)
  File "C:\Users\Ruud\Documents\Git\xdrlib2\parser\parser.py", line 105, in _start_
    self._check_eof()
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 650, in _check_eof
    self._error('Expecting end of text.')
  File "C:\Users\Ruud\Documents\Environments\xdr2lib\lib\site-packages\grako\contexts.py", line 450, in _error
    item
grako.exceptions.FailedParse: ..\etc\example.xdr(1:1) Expecting end of text. :
const MAXUSERNAME = 32;     /* max length of a user name */
^
start
