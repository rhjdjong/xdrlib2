#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 9, 8, 14, 1, 37, 3)

__all__ = [
    'xdrParser',
    'xdrSemantics',
    'main'
]

KEYWORDS = set([
    'bool',
    'case',
    'const',
    'default',
    'double',
    'enum',
    'float',
    'hyper',
    'int',
    'opaque',
    'quadruple',
    'string',
    'struct',
    'switch',
    'typedef',
    'union',
    'void',
])


class xdrBuffer(Buffer):
    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re='\\/\\*((?:.|\\n)*?)\\*\\/',
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='_',
                 **kwargs):
        super(xdrBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class xdrParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re='\\/\\*((?:.|\\n)*?)\\*\\/',
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 parseinfo=True,
                 keywords=KEYWORDS,
                 namechars='_',
                 **kwargs):
        super(xdrParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    def parse(self, text, *args, **kwargs):
        if not isinstance(text, Buffer):
            text = xdrBuffer(text, **kwargs)
        return super(xdrParser, self).parse(text, *args, **kwargs)

    @graken()
    def _start_(self):
        self._specification_()
        self._check_eof()

    @graken()
    def _specification_(self):

        def block0():
            self._definition_()
        self._closure(block0)

    @graken()
    def _definition_(self):
        with self._choice():
            with self._option():
                self._type_def_()
            with self._option():
                self._constant_def_()
            self._error('no available options')

    @graken()
    def _type_def_(self):
        with self._choice():
            with self._option():
                self._token('typedef')
                self._typedef_()
                self.name_last_node('@')
                self._token(';')
            with self._option():
                self._token('enum')
                self._enumdef_()
                self.name_last_node('@')
                self._token(';')
            with self._option():
                self._token('struct')
                self._structdef_()
                self.name_last_node('@')
                self._token(';')
            with self._option():
                self._token('union')
                self._uniondef_()
                self.name_last_node('@')
                self._token(';')
            self._error('no available options')

    @graken()
    def _typedef_(self):
        self._declaration_()

    @graken()
    def _enumdef_(self):
        self._identifier_()
        self._enum_body_()

    @graken()
    def _structdef_(self):
        self._identifier_()
        self._struct_body_()

    @graken()
    def _uniondef_(self):
        self._identifier_()
        self._union_body_()

    @graken()
    def _constant_def_(self):
        self._token('const')
        self._identifier_()
        self.name_last_node('@')
        self._token('=')
        self._constant_()
        self.name_last_node('@')
        self._token(';')

    @graken('Declaration')
    def _declaration_(self):
        with self._choice():
            with self._option():
                self._type_specifier_()
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('name')
                with self._optional():
                    with self._choice():
                        with self._option():
                            self._token('[')
                            self._constant('false')
                            self.name_last_node('var')
                            self._value_()
                            self.name_last_node('size')
                            self._token(']')
                        with self._option():
                            self._token('<')
                            self._constant('true')
                            self.name_last_node('var')
                            with self._optional():
                                self._value_()
                                self.name_last_node('size')
                            self._token('>')
                        self._error('no available options')
            with self._option():
                self._token('opaque')
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('name')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('[')
                            self._constant('false')
                            self.name_last_node('var')
                            self._value_()
                            self.name_last_node('size')
                            self._token(']')
                        with self._option():
                            self._token('<')
                            self._constant('true')
                            self.name_last_node('var')
                            with self._optional():
                                self._value_()
                                self.name_last_node('size')
                            self._token('>')
                        self._error('no available options')
            with self._option():
                self._token('string')
                self.name_last_node('type')
                self._identifier_()
                self.name_last_node('name')
                self._token('<')
                self._constant('true')
                self.name_last_node('var')
                with self._optional():
                    self._value_()
                    self.name_last_node('size')
                self._token('>')
            with self._option():
                self._constant('true')
                self.name_last_node('optional')
                self._type_specifier_()
                self.name_last_node('type')
                self._token('*')
                self._identifier_()
                self.name_last_node('name')
            with self._option():
                self._token('void')
                self.name_last_node('type')
            self._error('expecting one of: void')
        self.ast._define(
            ['name', 'optional', 'size', 'type', 'var'],
            []
        )

    @graken()
    def _value_(self):
        with self._choice():
            with self._option():
                self._constant_()
            with self._option():
                self._identifier_()
            self._error('no available options')

    @graken()
    def _constant_(self):
        with self._choice():
            with self._option():
                self._decimal_constant_()
            with self._option():
                self._hexadecimal_constant_()
            with self._option():
                self._octal_constant_()
            self._error('no available options')

    @graken()
    def _type_specifier_(self):
        with self._choice():
            with self._option():
                self._constant('unsigned_int')
                self.name_last_node('@')
                self._token('unsigned')
                self._token('int')
            with self._option():
                self._constant('unsigned_hyper')
                self.name_last_node('@')
                self._token('unsigned')
                self._token('hyper')
            with self._option():
                self._token('int')
            with self._option():
                self._token('hyper')
            with self._option():
                self._token('float')
            with self._option():
                self._token('double')
            with self._option():
                self._token('quadruple')
            with self._option():
                self._token('bool')
            with self._option():
                self._enum_type_spec_()
            with self._option():
                self._struct_type_spec_()
            with self._option():
                self._union_type_spec_()
            with self._option():
                self._identifier_()
            self._error('expecting one of: bool double float hyper int quadruple')

    @graken()
    def _enum_type_spec_(self):
        self._token('enum')
        self._enum_body_()
        self.name_last_node('@')

    @graken()
    def _enum_body_(self):
        self._token('{')
        with self._group():

            def sep0():
                self._token(',')

            def block0():
                self._enum_item_()
                self.add_last_node_to_name('@')
            self._positive_closure(block0, sep=sep0)
        self._token('}')

    @graken()
    def _enum_item_(self):
        self._identifier_()
        self.name_last_node('@')
        self._token('=')
        self._value_()
        self.name_last_node('@')

    @graken()
    def _struct_type_spec_(self):
        self._token('struct')
        self._struct_body_()
        self.name_last_node('@')

    @graken()
    def _struct_body_(self):
        self._token('{')

        def block0():
            self._declaration_()
            self.add_last_node_to_name('@')
            self._token(';')
        self._positive_closure(block0)
        self._token('}')

    @graken()
    def _union_type_spec_(self):
        self._token('union')
        self._union_body_()
        self.name_last_node('@')

    @graken()
    def _union_body_(self):
        self._token('switch')
        self._token('(')
        self._declaration_()
        self.name_last_node('switch')
        self._token(')')
        self._token('{')

        def block2():
            self._case_spec_()
        self._positive_closure(block2)
        self.name_last_node('variants')
        with self._optional():
            self._token('default')
            self._token(':')
            self._declaration_()
            self.name_last_node('default')
            self._token(';')
        self._token('}')
        self.ast._define(
            ['default', 'switch', 'variants'],
            []
        )

    @graken()
    def _case_spec_(self):

        def block0():
            self._token('case')
            self._value_()
            self.add_last_node_to_name('case')
            self._token(':')
        self._positive_closure(block0)
        self._declaration_()
        self.name_last_node('variant')
        self._token(';')
        self.ast._define(
            ['variant'],
            ['case']
        )

    @graken()
    def _decimal_constant_(self):
        self._pattern(r'-?[1-9][0-9]*')

    @graken()
    def _hexadecimal_constant_(self):
        self._pattern(r'0x[0-9a-fA-F]+')

    @graken()
    def _octal_constant_(self):
        self._pattern(r'0[0-7]*')

    @graken('Name')
    def _identifier_(self):
        self._pattern(r'[A-Za-z][A-Za-z0-9_]*')
        self._check_name()


class xdrSemantics(object):
    def start(self, ast):
        return ast

    def specification(self, ast):
        return ast

    def definition(self, ast):
        return ast

    def type_def(self, ast):
        return ast

    def typedef(self, ast):
        return ast

    def enumdef(self, ast):
        return ast

    def structdef(self, ast):
        return ast

    def uniondef(self, ast):
        return ast

    def constant_def(self, ast):
        return ast

    def declaration(self, ast):
        return ast

    def value(self, ast):
        return ast

    def constant(self, ast):
        return ast

    def type_specifier(self, ast):
        return ast

    def enum_type_spec(self, ast):
        return ast

    def enum_body(self, ast):
        return ast

    def enum_item(self, ast):
        return ast

    def struct_type_spec(self, ast):
        return ast

    def struct_body(self, ast):
        return ast

    def union_type_spec(self, ast):
        return ast

    def union_body(self, ast):
        return ast

    def case_spec(self, ast):
        return ast

    def decimal_constant(self, ast):
        return ast

    def hexadecimal_constant(self, ast):
        return ast

    def octal_constant(self, ast):
        return ast

    def identifier(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re='\\/\\*((?:.|\\n)*?)\\*\\/',
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = xdrParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, xdrParser, name='xdr')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
